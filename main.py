import telebot
from telebot import types
import logging
from datetime import datetime

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å—é–¥–∞
BOT_TOKEN = "7514342466:AAEaW7lgV0xrVbAmle8Z1JYG6yLao54GHpk"
ADMIN_ID = 314085025  # –í–∞—à telegram ID

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_CONTACT = "waiting_contact"
WAITING_EXPERIENCE = "waiting_experience"
WAITING_FORMAT = "waiting_format"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_contact_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    contact_button = types.KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    keyboard.add(contact_button)
    return keyboard

def get_experience_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    buttons = [
        "üÜï –ù–æ–≤–∏—á–æ–∫",
        "üìÖ –•–æ–∂—É –≤ –∑–∞–ª –º–µ—Å—è—Ü",
        "üí™ –•–æ–∂—É –≤ –∑–∞–ª –ø–æ–ª–≥–æ–¥–∞",
        "üèãÔ∏è –•–æ–∂—É –≥–æ–¥ (–∑–∞–Ω–∏–º–∞–ª—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º)",
        "üéØ –ì–æ–¥ –∑–∞–Ω–∏–º–∞–ª—Å—è –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞"
    ]
    keyboard.add(*[types.KeyboardButton(btn) for btn in buttons])
    return keyboard

def get_format_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    buttons = [
        "üé• –û–Ω–ª–∞–π–Ω –≤–µ–¥–µ–Ω–∏–µ (–≤–∏–¥–µ–æ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π + —Å–≤—è–∑—å 24/7)",
        "üìπ –û–Ω–ª–∞–π–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–≤–∏–¥–µ–æ—Å–≤—è–∑—å + —Å–≤—è–∑—å 24/7)"
    ]
    keyboard.add(*[types.KeyboardButton(btn) for btn in buttons])
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    user_states[user_id] = WAITING_CONTACT
    user_data[user_id] = {}
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ telegram.",
        reply_markup=get_contact_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def process_contact(message):
    user_id = message.from_user.id
    
    if user_id not in user_states or user_states[user_id] != WAITING_CONTACT:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    contact_info = f"{message.contact.first_name} {message.contact.last_name or ''}".strip()
    phone = message.contact.phone_number
    
    user_data[user_id] = {
        'contact_name': contact_info,
        'phone': phone,
        'username': message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    }
    
    user_states[user_id] = WAITING_EXPERIENCE
    
    bot.send_message(
        message.chat.id,
        "üì± –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
        reply_markup=get_experience_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def process_text(message):
    user_id = message.from_user.id
    text = message.text
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥
    if user_id not in user_states:
        bot.send_message(message.chat.id, "ü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start")
        return
    
    current_state = user_states[user_id]
    
    # –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é
    if current_state == WAITING_CONTACT:
        user_data[user_id] = {
            'contact_name': message.from_user.full_name,
            'phone': text,
            'username': message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        }
        
        user_states[user_id] = WAITING_EXPERIENCE
        
        bot.send_message(
            message.chat.id,
            "üìù –ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=get_experience_keyboard()
        )
    
    # –í—ã–±–æ—Ä –æ–ø—ã—Ç–∞
    elif current_state == WAITING_EXPERIENCE:
        experience_options = [
            "üÜï –ù–æ–≤–∏—á–æ–∫",
            "üìÖ –•–æ–∂—É –≤ –∑–∞–ª –º–µ—Å—è—Ü", 
            "üí™ –•–æ–∂—É –≤ –∑–∞–ª –ø–æ–ª–≥–æ–¥–∞",
            "üèãÔ∏è –•–æ–∂—É –≥–æ–¥ (–∑–∞–Ω–∏–º–∞–ª—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º)",
            "üéØ –ì–æ–¥ –∑–∞–Ω–∏–º–∞–ª—Å—è –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞"
        ]
        
        if text not in experience_options:
            bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=get_experience_keyboard()
            )
            return
        
        user_data[user_id]['experience'] = text
        user_states[user_id] = WAITING_FORMAT
        
        bot.send_message(
            message.chat.id,
            "üí™ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
            reply_markup=get_format_keyboard()
        )
    
    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
    elif current_state == WAITING_FORMAT:
        format_options = [
            "üé• –û–Ω–ª–∞–π–Ω –≤–µ–¥–µ–Ω–∏–µ (–≤–∏–¥–µ–æ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π + —Å–≤—è–∑—å 24/7)",
            "üìπ –û–Ω–ª–∞–π–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–≤–∏–¥–µ–æ—Å–≤—è–∑—å + —Å–≤—è–∑—å 24/7)"
        ]
        
        if text not in format_options:
            bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:",
                reply_markup=get_format_keyboard()
            )
            return
        
        user_data[user_id]['format'] = text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n"
            "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        data = user_data[user_id]
        admin_message = (
            "üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –¢–†–ï–ù–ò–†–û–í–ö–ò\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['contact_name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üÜî Username: @{data['username']}\n"
            f"üí™ –û–ø—ã—Ç: {data['experience']}\n"
            f"üéØ –§–æ—Ä–º–∞—Ç: {data['format']}\n"
            f"üìÖ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        try:
            bot.send_message(ADMIN_ID, admin_message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_states[user_id]
        del user_data[user_id]
    
    else:
        bot.send_message(message.chat.id, "ü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()